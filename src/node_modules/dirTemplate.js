/**
 * Created by MonoKmm on 2017/3/5.
 */
(function() {
    var fs = require('fs');
    var path = require("path");
    function TemplateString() {

    }

    TemplateString.prototype = {
        transform: function (filePath,js,json,fn) {
            var Replacement = JSON.parse(json);
            var ReplacementArr = this.until.objToarr(Replacement);
            var arrRegex = function (arr, regex) {
                if (arr instanceof Array){
                    return arr.map(function (item) {
                        return item.match(regex).reverse();
                    })
                }
            };
            var num = function (p) {
                var i =p;
                return function (n) {
                    i += 1;
                    return (Array(n).join(0) + i).slice(-n);
                };
            };
            eval('var Template = '+js);
    // eval('Template = ' + js);
//     function (dirList,Replacement,ReplacementArr) {
// var regex = /[\u2605][\u4E00-\u9FA5\uF900-\uFA2D]*|[\u2606][\u4E00-\u9FA5\uF900-\uFA2D]*/g;
// var  fncount = num(0);//init count;
// var js =
// `
// {
// "vision" : "v1.0",
// "g_class":"naruto",
// "char_img":[
// ${ReplacementArr.map(function(item,index,arr) {
//         return (`   {"id":"${item[0]}","src":"image/char/${item[0]}.jpg","cost":${item[1]}}${index == arr.length-1 ? '':','}`)
//     }).join('\n')}
// ],
// "list" : [
// ${arrRegex(dirList,regex).map(function (item,index,arr) {
//         return `    {"id":"no${fncount(4)}", ${item.map(function (name,index,arr) {
//             var repEnd = Replacement[name];
//             return `"${repEnd[0]}":"1"${index == arr.length-1 ? '':','}`
//         }).join('')}}${index == arr.length-1 ? '':','}`
//     }).join('\n')
// }
//           ]
// }
// `;
// return js;
// };

            this.fnWalkDir(filePath, function (dirList) {
                var p = Template(dirList,Replacement,ReplacementArr);
                fn(p);
            });
        },
        fnRename: function (obj) {
            if(typeof obj == 'object'){

            }
        },
        fnWalkDir: function(filePath,fn) {
            var drr = [];
            var p1 = function (filePath) {
                console.log(filePath);
                return new Promise(function (resolve, reject) {
                    fs.readdir(filePath, function(err,files){
                            resolve(files);
                    })
                })
            };
            var p2 = function (files) {
                return Promise.all(files.map(function (filename,index,arr) {
                    return new Promise(function (resolve,reject) {
                        fs.stat(path.join(filePath, filename),function (err, stats) {
                            if(stats.isDirectory()){
                                resolve(drr.push(filename));
                            }else {
                                resolve(null);
                            }
                        })
                    })

                }));
            };
            var p3 = function () {
              return Promise.resolve(fn(drr))
            };
            p1(filePath).then(p2).then(p3).catch(console.log.bind(console));
        },
        fnGetJson: function (path) {
            return new Promise(function (resolve, reject) {
                fs.readFile(path, 'utf-8', function (err, data) {
                    if (!err) {
                        // console.log(json);
                        resolve(JSON.parse(data));
                    } else {
                        reject(err);
                    }
                });
            });
        },
        until: {
            objToarr: function (obj) {
                var arr = [];
                for( p in obj){
                    arr.push(obj[p]);
                }
                return arr;
            }
        }
    };

    // Establish the root object, `window` (`self`) in the browser, `global`  
    // on the server, or `this` in some virtual machines. We use `self`  
    // instead of `window` for `WebWorker` support.  
    var root = typeof self === 'object' && self.self === self && self ||
        typeof global === 'object' && global.global === global && global ||
        this;

    // Node.js  
    if (typeof module === 'object' && module.exports) {
        module.exports = new TemplateString();
    }
    // AMD / RequireJS  
    else if (typeof define === 'function' && define.amd) {
        define([], function() {
            return new TemplateString();
        });
    }
    // included directly via <script> tag  
    else {
        root.TemplateString = new TemplateString();
    }

}());

